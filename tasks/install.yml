---
- name: clone oh-my-zsh
  become: true
  become_user: "{{ user.username }}"
  git:
    repo: "{{ oh_my_zsh_repository }}"
    clone: true
    dest: "$HOME/.oh-my-zsh"
    version: master
  with_items: "{{ oh_my_zsh_users }}"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"
  tags:
    - oh-my-zsh
    - installation

- name: copy .zshrc
  become: true
  become_user: "{{ user.username }}"
  template:
    dest: "{{ user.username }}/.zshrc" # required. Location to render the template to on the remote machine.
    src: ./zshrc.j2 # required. Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.
    force: yes # not required. the default is C(yes), which will replace the remote file when contents are different than the source.  If C(no), the file will only be transferred if the destination does not exist.
    mode: 0644 # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers.  You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.  As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).  As of version 2.6, the mode may also be the special string C(preserve).  C(preserve) means that the file will be given the same permissions as the source file.
    backup: true # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
  loop: "{{ oh_my_zsh_users }}"
  loop_control:
    loop_var: user
    label: "{{ user.username }}"
  tags:
    - oh-my-zsh
    - installation
